// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/easyops-cn/mgoi (interfaces: Session,Database,Collection,Query,Iter,Bulk)

// Package mgoimock is a generated GoMock package.
package mgoimock

import (
	reflect "reflect"
	time "time"

	mgoi "github.com/easyops-cn/mgoi"
	mgo "github.com/globalsign/mgo"
	bson "github.com/globalsign/mgo/bson"
	gomock "github.com/golang/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// BuildInfo mocks base method.
func (m *MockSession) BuildInfo() (mgo.BuildInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildInfo")
	ret0, _ := ret[0].(mgo.BuildInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildInfo indicates an expected call of BuildInfo.
func (mr *MockSessionMockRecorder) BuildInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildInfo", reflect.TypeOf((*MockSession)(nil).BuildInfo))
}

// Clone mocks base method.
func (m *MockSession) Clone() mgoi.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(mgoi.Session)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockSessionMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockSession)(nil).Clone))
}

// Close mocks base method.
func (m *MockSession) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// Copy mocks base method.
func (m *MockSession) Copy() mgoi.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(mgoi.Session)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockSessionMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockSession)(nil).Copy))
}

// DB mocks base method.
func (m *MockSession) DB(arg0 string) mgoi.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB", arg0)
	ret0, _ := ret[0].(mgoi.Database)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockSessionMockRecorder) DB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockSession)(nil).DB), arg0)
}

// DatabaseNames mocks base method.
func (m *MockSession) DatabaseNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseNames indicates an expected call of DatabaseNames.
func (mr *MockSessionMockRecorder) DatabaseNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseNames", reflect.TypeOf((*MockSession)(nil).DatabaseNames))
}

// EnsureSafe mocks base method.
func (m *MockSession) EnsureSafe(arg0 *mgo.Safe) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnsureSafe", arg0)
}

// EnsureSafe indicates an expected call of EnsureSafe.
func (mr *MockSessionMockRecorder) EnsureSafe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureSafe", reflect.TypeOf((*MockSession)(nil).EnsureSafe), arg0)
}

// FindRef mocks base method.
func (m *MockSession) FindRef(arg0 *mgo.DBRef) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRef", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// FindRef indicates an expected call of FindRef.
func (mr *MockSessionMockRecorder) FindRef(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRef", reflect.TypeOf((*MockSession)(nil).FindRef), arg0)
}

// Fsync mocks base method.
func (m *MockSession) Fsync(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fsync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fsync indicates an expected call of Fsync.
func (mr *MockSessionMockRecorder) Fsync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fsync", reflect.TypeOf((*MockSession)(nil).Fsync), arg0)
}

// FsyncLock mocks base method.
func (m *MockSession) FsyncLock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FsyncLock")
	ret0, _ := ret[0].(error)
	return ret0
}

// FsyncLock indicates an expected call of FsyncLock.
func (mr *MockSessionMockRecorder) FsyncLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FsyncLock", reflect.TypeOf((*MockSession)(nil).FsyncLock))
}

// FsyncUnlock mocks base method.
func (m *MockSession) FsyncUnlock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FsyncUnlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// FsyncUnlock indicates an expected call of FsyncUnlock.
func (mr *MockSessionMockRecorder) FsyncUnlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FsyncUnlock", reflect.TypeOf((*MockSession)(nil).FsyncUnlock))
}

// LiveServers mocks base method.
func (m *MockSession) LiveServers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LiveServers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// LiveServers indicates an expected call of LiveServers.
func (mr *MockSessionMockRecorder) LiveServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiveServers", reflect.TypeOf((*MockSession)(nil).LiveServers))
}

// Login mocks base method.
func (m *MockSession) Login(arg0 *mgo.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockSessionMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSession)(nil).Login), arg0)
}

// LogoutAll mocks base method.
func (m *MockSession) LogoutAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogoutAll")
}

// LogoutAll indicates an expected call of LogoutAll.
func (mr *MockSessionMockRecorder) LogoutAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutAll", reflect.TypeOf((*MockSession)(nil).LogoutAll))
}

// Mode mocks base method.
func (m *MockSession) Mode() mgo.Mode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mode")
	ret0, _ := ret[0].(mgo.Mode)
	return ret0
}

// Mode indicates an expected call of Mode.
func (mr *MockSessionMockRecorder) Mode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mode", reflect.TypeOf((*MockSession)(nil).Mode))
}

// New mocks base method.
func (m *MockSession) New() mgoi.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(mgoi.Session)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockSessionMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockSession)(nil).New))
}

// Ping mocks base method.
func (m *MockSession) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockSessionMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSession)(nil).Ping))
}

// Refresh mocks base method.
func (m *MockSession) Refresh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Refresh")
}

// Refresh indicates an expected call of Refresh.
func (mr *MockSessionMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockSession)(nil).Refresh))
}

// ResetIndexCache mocks base method.
func (m *MockSession) ResetIndexCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetIndexCache")
}

// ResetIndexCache indicates an expected call of ResetIndexCache.
func (mr *MockSessionMockRecorder) ResetIndexCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetIndexCache", reflect.TypeOf((*MockSession)(nil).ResetIndexCache))
}

// Run mocks base method.
func (m *MockSession) Run(arg0, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockSessionMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSession)(nil).Run), arg0, arg1)
}

// Safe mocks base method.
func (m *MockSession) Safe() *mgo.Safe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Safe")
	ret0, _ := ret[0].(*mgo.Safe)
	return ret0
}

// Safe indicates an expected call of Safe.
func (mr *MockSessionMockRecorder) Safe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Safe", reflect.TypeOf((*MockSession)(nil).Safe))
}

// SelectServers mocks base method.
func (m *MockSession) SelectServers(arg0 ...bson.D) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SelectServers", varargs...)
}

// SelectServers indicates an expected call of SelectServers.
func (mr *MockSessionMockRecorder) SelectServers(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectServers", reflect.TypeOf((*MockSession)(nil).SelectServers), arg0...)
}

// SetBatch mocks base method.
func (m *MockSession) SetBatch(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBatch", arg0)
}

// SetBatch indicates an expected call of SetBatch.
func (mr *MockSessionMockRecorder) SetBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBatch", reflect.TypeOf((*MockSession)(nil).SetBatch), arg0)
}

// SetBypassValidation mocks base method.
func (m *MockSession) SetBypassValidation(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBypassValidation", arg0)
}

// SetBypassValidation indicates an expected call of SetBypassValidation.
func (mr *MockSessionMockRecorder) SetBypassValidation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBypassValidation", reflect.TypeOf((*MockSession)(nil).SetBypassValidation), arg0)
}

// SetCursorTimeout mocks base method.
func (m *MockSession) SetCursorTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCursorTimeout", arg0)
}

// SetCursorTimeout indicates an expected call of SetCursorTimeout.
func (mr *MockSessionMockRecorder) SetCursorTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCursorTimeout", reflect.TypeOf((*MockSession)(nil).SetCursorTimeout), arg0)
}

// SetMode mocks base method.
func (m *MockSession) SetMode(arg0 mgo.Mode, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMode", arg0, arg1)
}

// SetMode indicates an expected call of SetMode.
func (mr *MockSessionMockRecorder) SetMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMode", reflect.TypeOf((*MockSession)(nil).SetMode), arg0, arg1)
}

// SetPoolLimit mocks base method.
func (m *MockSession) SetPoolLimit(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPoolLimit", arg0)
}

// SetPoolLimit indicates an expected call of SetPoolLimit.
func (mr *MockSessionMockRecorder) SetPoolLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPoolLimit", reflect.TypeOf((*MockSession)(nil).SetPoolLimit), arg0)
}

// SetPoolTimeout mocks base method.
func (m *MockSession) SetPoolTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPoolTimeout", arg0)
}

// SetPoolTimeout indicates an expected call of SetPoolTimeout.
func (mr *MockSessionMockRecorder) SetPoolTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPoolTimeout", reflect.TypeOf((*MockSession)(nil).SetPoolTimeout), arg0)
}

// SetPrefetch mocks base method.
func (m *MockSession) SetPrefetch(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrefetch", arg0)
}

// SetPrefetch indicates an expected call of SetPrefetch.
func (mr *MockSessionMockRecorder) SetPrefetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrefetch", reflect.TypeOf((*MockSession)(nil).SetPrefetch), arg0)
}

// SetSafe mocks base method.
func (m *MockSession) SetSafe(arg0 *mgo.Safe) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSafe", arg0)
}

// SetSafe indicates an expected call of SetSafe.
func (mr *MockSessionMockRecorder) SetSafe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSafe", reflect.TypeOf((*MockSession)(nil).SetSafe), arg0)
}

// SetSocketTimeout mocks base method.
func (m *MockSession) SetSocketTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSocketTimeout", arg0)
}

// SetSocketTimeout indicates an expected call of SetSocketTimeout.
func (mr *MockSessionMockRecorder) SetSocketTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSocketTimeout", reflect.TypeOf((*MockSession)(nil).SetSocketTimeout), arg0)
}

// SetSyncTimeout mocks base method.
func (m *MockSession) SetSyncTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSyncTimeout", arg0)
}

// SetSyncTimeout indicates an expected call of SetSyncTimeout.
func (mr *MockSessionMockRecorder) SetSyncTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSyncTimeout", reflect.TypeOf((*MockSession)(nil).SetSyncTimeout), arg0)
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockDatabase) AddUser(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockDatabaseMockRecorder) AddUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockDatabase)(nil).AddUser), arg0, arg1, arg2)
}

// C mocks base method.
func (m *MockDatabase) C(arg0 string) mgoi.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "C", arg0)
	ret0, _ := ret[0].(mgoi.Collection)
	return ret0
}

// C indicates an expected call of C.
func (mr *MockDatabaseMockRecorder) C(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockDatabase)(nil).C), arg0)
}

// CollectionNames mocks base method.
func (m *MockDatabase) CollectionNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionNames indicates an expected call of CollectionNames.
func (mr *MockDatabaseMockRecorder) CollectionNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionNames", reflect.TypeOf((*MockDatabase)(nil).CollectionNames))
}

// CreateView mocks base method.
func (m *MockDatabase) CreateView(arg0, arg1 string, arg2 interface{}, arg3 *mgo.Collation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateView", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateView indicates an expected call of CreateView.
func (mr *MockDatabaseMockRecorder) CreateView(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockDatabase)(nil).CreateView), arg0, arg1, arg2, arg3)
}

// DropDatabase mocks base method.
func (m *MockDatabase) DropDatabase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockDatabaseMockRecorder) DropDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockDatabase)(nil).DropDatabase))
}

// FindRef mocks base method.
func (m *MockDatabase) FindRef(arg0 *mgo.DBRef) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRef", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// FindRef indicates an expected call of FindRef.
func (mr *MockDatabaseMockRecorder) FindRef(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRef", reflect.TypeOf((*MockDatabase)(nil).FindRef), arg0)
}

// Login mocks base method.
func (m *MockDatabase) Login(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockDatabaseMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockDatabase)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *MockDatabase) Logout() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout")
}

// Logout indicates an expected call of Logout.
func (mr *MockDatabaseMockRecorder) Logout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockDatabase)(nil).Logout))
}

// RemoveUser mocks base method.
func (m *MockDatabase) RemoveUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockDatabaseMockRecorder) RemoveUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockDatabase)(nil).RemoveUser), arg0)
}

// Run mocks base method.
func (m *MockDatabase) Run(arg0, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockDatabaseMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDatabase)(nil).Run), arg0, arg1)
}

// UpsertUser mocks base method.
func (m *MockDatabase) UpsertUser(arg0 *mgo.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockDatabaseMockRecorder) UpsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockDatabase)(nil).UpsertUser), arg0)
}

// MockCollection is a mock of Collection interface.
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionMockRecorder
}

// MockCollectionMockRecorder is the mock recorder for MockCollection.
type MockCollectionMockRecorder struct {
	mock *MockCollection
}

// NewMockCollection creates a new mock instance.
func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &MockCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollection) EXPECT() *MockCollectionMockRecorder {
	return m.recorder
}

// Bulk mocks base method.
func (m *MockCollection) Bulk() mgoi.Bulk {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bulk")
	ret0, _ := ret[0].(mgoi.Bulk)
	return ret0
}

// Bulk indicates an expected call of Bulk.
func (mr *MockCollectionMockRecorder) Bulk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bulk", reflect.TypeOf((*MockCollection)(nil).Bulk))
}

// Count mocks base method.
func (m *MockCollection) Count() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockCollectionMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCollection)(nil).Count))
}

// Create mocks base method.
func (m *MockCollection) Create(arg0 *mgo.CollectionInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCollectionMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCollection)(nil).Create), arg0)
}

// DropAllIndexes mocks base method.
func (m *MockCollection) DropAllIndexes() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropAllIndexes")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropAllIndexes indicates an expected call of DropAllIndexes.
func (mr *MockCollectionMockRecorder) DropAllIndexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAllIndexes", reflect.TypeOf((*MockCollection)(nil).DropAllIndexes))
}

// DropCollection mocks base method.
func (m *MockCollection) DropCollection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropCollection")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropCollection indicates an expected call of DropCollection.
func (mr *MockCollectionMockRecorder) DropCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropCollection", reflect.TypeOf((*MockCollection)(nil).DropCollection))
}

// DropIndex mocks base method.
func (m *MockCollection) DropIndex(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropIndex", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropIndex indicates an expected call of DropIndex.
func (mr *MockCollectionMockRecorder) DropIndex(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropIndex", reflect.TypeOf((*MockCollection)(nil).DropIndex), arg0...)
}

// DropIndexName mocks base method.
func (m *MockCollection) DropIndexName(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropIndexName", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropIndexName indicates an expected call of DropIndexName.
func (mr *MockCollectionMockRecorder) DropIndexName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropIndexName", reflect.TypeOf((*MockCollection)(nil).DropIndexName), arg0)
}

// EnsureIndex mocks base method.
func (m *MockCollection) EnsureIndex(arg0 mgo.Index) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureIndex", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureIndex indicates an expected call of EnsureIndex.
func (mr *MockCollectionMockRecorder) EnsureIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureIndex", reflect.TypeOf((*MockCollection)(nil).EnsureIndex), arg0)
}

// EnsureIndexKey mocks base method.
func (m *MockCollection) EnsureIndexKey(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnsureIndexKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureIndexKey indicates an expected call of EnsureIndexKey.
func (mr *MockCollectionMockRecorder) EnsureIndexKey(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureIndexKey", reflect.TypeOf((*MockCollection)(nil).EnsureIndexKey), arg0...)
}

// Find mocks base method.
func (m *MockCollection) Find(arg0 interface{}) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockCollectionMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCollection)(nil).Find), arg0)
}

// FindId mocks base method.
func (m *MockCollection) FindId(arg0 interface{}) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindId", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// FindId indicates an expected call of FindId.
func (mr *MockCollectionMockRecorder) FindId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindId", reflect.TypeOf((*MockCollection)(nil).FindId), arg0)
}

// Indexes mocks base method.
func (m *MockCollection) Indexes() ([]mgo.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Indexes")
	ret0, _ := ret[0].([]mgo.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Indexes indicates an expected call of Indexes.
func (mr *MockCollectionMockRecorder) Indexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Indexes", reflect.TypeOf((*MockCollection)(nil).Indexes))
}

// Insert mocks base method.
func (m *MockCollection) Insert(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCollectionMockRecorder) Insert(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCollection)(nil).Insert), arg0...)
}

// Remove mocks base method.
func (m *MockCollection) Remove(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockCollectionMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCollection)(nil).Remove), arg0)
}

// RemoveAll mocks base method.
func (m *MockCollection) RemoveAll(arg0 interface{}) (*mgo.ChangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", arg0)
	ret0, _ := ret[0].(*mgo.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockCollectionMockRecorder) RemoveAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockCollection)(nil).RemoveAll), arg0)
}

// RemoveId mocks base method.
func (m *MockCollection) RemoveId(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveId", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveId indicates an expected call of RemoveId.
func (mr *MockCollectionMockRecorder) RemoveId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveId", reflect.TypeOf((*MockCollection)(nil).RemoveId), arg0)
}

// Repair mocks base method.
func (m *MockCollection) Repair() mgoi.Iter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repair")
	ret0, _ := ret[0].(mgoi.Iter)
	return ret0
}

// Repair indicates an expected call of Repair.
func (mr *MockCollectionMockRecorder) Repair() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repair", reflect.TypeOf((*MockCollection)(nil).Repair))
}

// Update mocks base method.
func (m *MockCollection) Update(arg0, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCollectionMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCollection)(nil).Update), arg0, arg1)
}

// UpdateAll mocks base method.
func (m *MockCollection) UpdateAll(arg0, arg1 interface{}) (*mgo.ChangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", arg0, arg1)
	ret0, _ := ret[0].(*mgo.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockCollectionMockRecorder) UpdateAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockCollection)(nil).UpdateAll), arg0, arg1)
}

// UpdateId mocks base method.
func (m *MockCollection) UpdateId(arg0, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateId indicates an expected call of UpdateId.
func (mr *MockCollectionMockRecorder) UpdateId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateId", reflect.TypeOf((*MockCollection)(nil).UpdateId), arg0, arg1)
}

// Upsert mocks base method.
func (m *MockCollection) Upsert(arg0, arg1 interface{}) (*mgo.ChangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1)
	ret0, _ := ret[0].(*mgo.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockCollectionMockRecorder) Upsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockCollection)(nil).Upsert), arg0, arg1)
}

// UpsertId mocks base method.
func (m *MockCollection) UpsertId(arg0, arg1 interface{}) (*mgo.ChangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertId", arg0, arg1)
	ret0, _ := ret[0].(*mgo.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertId indicates an expected call of UpsertId.
func (mr *MockCollectionMockRecorder) UpsertId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertId", reflect.TypeOf((*MockCollection)(nil).UpsertId), arg0, arg1)
}

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockQuery) All(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockQueryMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockQuery)(nil).All), arg0)
}

// Apply mocks base method.
func (m *MockQuery) Apply(arg0 mgo.Change, arg1 interface{}) (*mgo.ChangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1)
	ret0, _ := ret[0].(*mgo.ChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockQueryMockRecorder) Apply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockQuery)(nil).Apply), arg0, arg1)
}

// Batch mocks base method.
func (m *MockQuery) Batch(arg0 int) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Batch", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Batch indicates an expected call of Batch.
func (mr *MockQueryMockRecorder) Batch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockQuery)(nil).Batch), arg0)
}

// Collation mocks base method.
func (m *MockQuery) Collation(arg0 *mgo.Collation) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collation", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Collation indicates an expected call of Collation.
func (mr *MockQueryMockRecorder) Collation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collation", reflect.TypeOf((*MockQuery)(nil).Collation), arg0)
}

// Comment mocks base method.
func (m *MockQuery) Comment(arg0 string) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Comment", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Comment indicates an expected call of Comment.
func (mr *MockQueryMockRecorder) Comment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comment", reflect.TypeOf((*MockQuery)(nil).Comment), arg0)
}

// Count mocks base method.
func (m *MockQuery) Count() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockQueryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockQuery)(nil).Count))
}

// Distinct mocks base method.
func (m *MockQuery) Distinct(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Distinct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockQueryMockRecorder) Distinct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockQuery)(nil).Distinct), arg0, arg1)
}

// Explain mocks base method.
func (m *MockQuery) Explain(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Explain", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Explain indicates an expected call of Explain.
func (mr *MockQueryMockRecorder) Explain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockQuery)(nil).Explain), arg0)
}

// For mocks base method.
func (m *MockQuery) For(arg0 interface{}, arg1 func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "For", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// For indicates an expected call of For.
func (mr *MockQueryMockRecorder) For(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "For", reflect.TypeOf((*MockQuery)(nil).For), arg0, arg1)
}

// Hint mocks base method.
func (m *MockQuery) Hint(arg0 ...string) mgoi.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Hint", varargs...)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Hint indicates an expected call of Hint.
func (mr *MockQueryMockRecorder) Hint(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hint", reflect.TypeOf((*MockQuery)(nil).Hint), arg0...)
}

// Iter mocks base method.
func (m *MockQuery) Iter() mgoi.Iter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iter")
	ret0, _ := ret[0].(mgoi.Iter)
	return ret0
}

// Iter indicates an expected call of Iter.
func (mr *MockQueryMockRecorder) Iter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockQuery)(nil).Iter))
}

// Limit mocks base method.
func (m *MockQuery) Limit(arg0 int) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockQueryMockRecorder) Limit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockQuery)(nil).Limit), arg0)
}

// LogReplay mocks base method.
func (m *MockQuery) LogReplay() mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogReplay")
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// LogReplay indicates an expected call of LogReplay.
func (mr *MockQueryMockRecorder) LogReplay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogReplay", reflect.TypeOf((*MockQuery)(nil).LogReplay))
}

// MapReduce mocks base method.
func (m *MockQuery) MapReduce(arg0 *mgo.MapReduce, arg1 interface{}) (*mgo.MapReduceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapReduce", arg0, arg1)
	ret0, _ := ret[0].(*mgo.MapReduceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapReduce indicates an expected call of MapReduce.
func (mr *MockQueryMockRecorder) MapReduce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapReduce", reflect.TypeOf((*MockQuery)(nil).MapReduce), arg0, arg1)
}

// One mocks base method.
func (m *MockQuery) One(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// One indicates an expected call of One.
func (mr *MockQueryMockRecorder) One(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockQuery)(nil).One), arg0)
}

// Prefetch mocks base method.
func (m *MockQuery) Prefetch(arg0 float64) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prefetch", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Prefetch indicates an expected call of Prefetch.
func (mr *MockQueryMockRecorder) Prefetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefetch", reflect.TypeOf((*MockQuery)(nil).Prefetch), arg0)
}

// Select mocks base method.
func (m *MockQuery) Select(arg0 interface{}) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockQueryMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockQuery)(nil).Select), arg0)
}

// SetMaxScan mocks base method.
func (m *MockQuery) SetMaxScan(arg0 int) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxScan", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// SetMaxScan indicates an expected call of SetMaxScan.
func (mr *MockQueryMockRecorder) SetMaxScan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxScan", reflect.TypeOf((*MockQuery)(nil).SetMaxScan), arg0)
}

// SetMaxTime mocks base method.
func (m *MockQuery) SetMaxTime(arg0 time.Duration) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxTime", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// SetMaxTime indicates an expected call of SetMaxTime.
func (mr *MockQueryMockRecorder) SetMaxTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxTime", reflect.TypeOf((*MockQuery)(nil).SetMaxTime), arg0)
}

// Skip mocks base method.
func (m *MockQuery) Skip(arg0 int) mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Skip", arg0)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Skip indicates an expected call of Skip.
func (mr *MockQueryMockRecorder) Skip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockQuery)(nil).Skip), arg0)
}

// Snapshot mocks base method.
func (m *MockQuery) Snapshot() mgoi.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockQueryMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockQuery)(nil).Snapshot))
}

// Sort mocks base method.
func (m *MockQuery) Sort(arg0 ...string) mgoi.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sort", varargs...)
	ret0, _ := ret[0].(mgoi.Query)
	return ret0
}

// Sort indicates an expected call of Sort.
func (mr *MockQueryMockRecorder) Sort(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockQuery)(nil).Sort), arg0...)
}

// Tail mocks base method.
func (m *MockQuery) Tail(arg0 time.Duration) mgoi.Iter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tail", arg0)
	ret0, _ := ret[0].(mgoi.Iter)
	return ret0
}

// Tail indicates an expected call of Tail.
func (mr *MockQueryMockRecorder) Tail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tail", reflect.TypeOf((*MockQuery)(nil).Tail), arg0)
}

// MockIter is a mock of Iter interface.
type MockIter struct {
	ctrl     *gomock.Controller
	recorder *MockIterMockRecorder
}

// MockIterMockRecorder is the mock recorder for MockIter.
type MockIterMockRecorder struct {
	mock *MockIter
}

// NewMockIter creates a new mock instance.
func NewMockIter(ctrl *gomock.Controller) *MockIter {
	mock := &MockIter{ctrl: ctrl}
	mock.recorder = &MockIterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIter) EXPECT() *MockIterMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockIter) All(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockIterMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIter)(nil).All), arg0)
}

// Close mocks base method.
func (m *MockIter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIter)(nil).Close))
}

// Done mocks base method.
func (m *MockIter) Done() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockIterMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockIter)(nil).Done))
}

// Err mocks base method.
func (m *MockIter) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockIterMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockIter)(nil).Err))
}

// For mocks base method.
func (m *MockIter) For(arg0 interface{}, arg1 func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "For", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// For indicates an expected call of For.
func (mr *MockIterMockRecorder) For(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "For", reflect.TypeOf((*MockIter)(nil).For), arg0, arg1)
}

// Next mocks base method.
func (m *MockIter) Next(arg0 interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockIterMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIter)(nil).Next), arg0)
}

// State mocks base method.
func (m *MockIter) State() (int64, []bson.Raw) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]bson.Raw)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockIterMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockIter)(nil).State))
}

// Timeout mocks base method.
func (m *MockIter) Timeout() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Timeout indicates an expected call of Timeout.
func (mr *MockIterMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockIter)(nil).Timeout))
}

// MockBulk is a mock of Bulk interface.
type MockBulk struct {
	ctrl     *gomock.Controller
	recorder *MockBulkMockRecorder
}

// MockBulkMockRecorder is the mock recorder for MockBulk.
type MockBulkMockRecorder struct {
	mock *MockBulk
}

// NewMockBulk creates a new mock instance.
func NewMockBulk(ctrl *gomock.Controller) *MockBulk {
	mock := &MockBulk{ctrl: ctrl}
	mock.recorder = &MockBulkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBulk) EXPECT() *MockBulkMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockBulk) Insert(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Insert", varargs...)
}

// Insert indicates an expected call of Insert.
func (mr *MockBulkMockRecorder) Insert(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBulk)(nil).Insert), arg0...)
}

// Remove mocks base method.
func (m *MockBulk) Remove(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Remove", varargs...)
}

// Remove indicates an expected call of Remove.
func (mr *MockBulkMockRecorder) Remove(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBulk)(nil).Remove), arg0...)
}

// RemoveAll mocks base method.
func (m *MockBulk) RemoveAll(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RemoveAll", varargs...)
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockBulkMockRecorder) RemoveAll(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockBulk)(nil).RemoveAll), arg0...)
}

// Run mocks base method.
func (m *MockBulk) Run() (*mgo.BulkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(*mgo.BulkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockBulkMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockBulk)(nil).Run))
}

// Unordered mocks base method.
func (m *MockBulk) Unordered() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unordered")
}

// Unordered indicates an expected call of Unordered.
func (mr *MockBulkMockRecorder) Unordered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unordered", reflect.TypeOf((*MockBulk)(nil).Unordered))
}

// Update mocks base method.
func (m *MockBulk) Update(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Update", varargs...)
}

// Update indicates an expected call of Update.
func (mr *MockBulkMockRecorder) Update(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBulk)(nil).Update), arg0...)
}

// UpdateAll mocks base method.
func (m *MockBulk) UpdateAll(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "UpdateAll", varargs...)
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockBulkMockRecorder) UpdateAll(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockBulk)(nil).UpdateAll), arg0...)
}

// Upsert mocks base method.
func (m *MockBulk) Upsert(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Upsert", varargs...)
}

// Upsert indicates an expected call of Upsert.
func (mr *MockBulkMockRecorder) Upsert(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockBulk)(nil).Upsert), arg0...)
}
